/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "maxY": 77900.0, "series": [{"data": [[0.0, 31.0], [0.1, 77.0], [0.2, 83.0], [0.3, 87.0], [0.4, 90.0], [0.5, 93.0], [0.6, 95.0], [0.7, 97.0], [0.8, 98.0], [0.9, 100.0], [1.0, 101.0], [1.1, 102.0], [1.2, 103.0], [1.3, 104.0], [1.4, 106.0], [1.5, 106.0], [1.6, 107.0], [1.7, 108.0], [1.8, 109.0], [1.9, 110.0], [2.0, 111.0], [2.1, 111.0], [2.2, 112.0], [2.3, 113.0], [2.4, 113.0], [2.5, 114.0], [2.6, 115.0], [2.7, 115.0], [2.8, 116.0], [2.9, 117.0], [3.0, 117.0], [3.1, 118.0], [3.2, 118.0], [3.3, 119.0], [3.4, 119.0], [3.5, 120.0], [3.6, 120.0], [3.7, 121.0], [3.8, 121.0], [3.9, 122.0], [4.0, 122.0], [4.1, 123.0], [4.2, 123.0], [4.3, 124.0], [4.4, 124.0], [4.5, 125.0], [4.6, 125.0], [4.7, 126.0], [4.8, 126.0], [4.9, 127.0], [5.0, 127.0], [5.1, 127.0], [5.2, 128.0], [5.3, 128.0], [5.4, 129.0], [5.5, 129.0], [5.6, 130.0], [5.7, 130.0], [5.8, 130.0], [5.9, 131.0], [6.0, 131.0], [6.1, 132.0], [6.2, 132.0], [6.3, 132.0], [6.4, 133.0], [6.5, 133.0], [6.6, 133.0], [6.7, 134.0], [6.8, 134.0], [6.9, 135.0], [7.0, 135.0], [7.1, 135.0], [7.2, 136.0], [7.3, 136.0], [7.4, 136.0], [7.5, 137.0], [7.6, 137.0], [7.7, 137.0], [7.8, 138.0], [7.9, 138.0], [8.0, 138.0], [8.1, 139.0], [8.2, 139.0], [8.3, 139.0], [8.4, 140.0], [8.5, 140.0], [8.6, 140.0], [8.7, 141.0], [8.8, 141.0], [8.9, 141.0], [9.0, 142.0], [9.1, 142.0], [9.2, 142.0], [9.3, 143.0], [9.4, 143.0], [9.5, 143.0], [9.6, 144.0], [9.7, 144.0], [9.8, 144.0], [9.9, 145.0], [10.0, 145.0], [10.1, 145.0], [10.2, 145.0], [10.3, 146.0], [10.4, 146.0], [10.5, 146.0], [10.6, 147.0], [10.7, 147.0], [10.8, 147.0], [10.9, 148.0], [11.0, 148.0], [11.1, 148.0], [11.2, 149.0], [11.3, 149.0], [11.4, 149.0], [11.5, 149.0], [11.6, 150.0], [11.7, 150.0], [11.8, 150.0], [11.9, 151.0], [12.0, 151.0], [12.1, 151.0], [12.2, 151.0], [12.3, 152.0], [12.4, 152.0], [12.5, 152.0], [12.6, 152.0], [12.7, 153.0], [12.8, 153.0], [12.9, 153.0], [13.0, 154.0], [13.1, 154.0], [13.2, 154.0], [13.3, 154.0], [13.4, 155.0], [13.5, 155.0], [13.6, 155.0], [13.7, 156.0], [13.8, 156.0], [13.9, 156.0], [14.0, 156.0], [14.1, 157.0], [14.2, 157.0], [14.3, 157.0], [14.4, 157.0], [14.5, 158.0], [14.6, 158.0], [14.7, 158.0], [14.8, 158.0], [14.9, 159.0], [15.0, 159.0], [15.1, 159.0], [15.2, 160.0], [15.3, 160.0], [15.4, 160.0], [15.5, 160.0], [15.6, 161.0], [15.7, 161.0], [15.8, 161.0], [15.9, 161.0], [16.0, 162.0], [16.1, 162.0], [16.2, 162.0], [16.3, 162.0], [16.4, 163.0], [16.5, 163.0], [16.6, 163.0], [16.7, 163.0], [16.8, 164.0], [16.9, 164.0], [17.0, 164.0], [17.1, 164.0], [17.2, 165.0], [17.3, 165.0], [17.4, 165.0], [17.5, 165.0], [17.6, 166.0], [17.7, 166.0], [17.8, 166.0], [17.9, 166.0], [18.0, 167.0], [18.1, 167.0], [18.2, 167.0], [18.3, 167.0], [18.4, 168.0], [18.5, 168.0], [18.6, 168.0], [18.7, 168.0], [18.8, 169.0], [18.9, 169.0], [19.0, 169.0], [19.1, 169.0], [19.2, 170.0], [19.3, 170.0], [19.4, 170.0], [19.5, 170.0], [19.6, 171.0], [19.7, 171.0], [19.8, 171.0], [19.9, 171.0], [20.0, 172.0], [20.1, 172.0], [20.2, 172.0], [20.3, 172.0], [20.4, 173.0], [20.5, 173.0], [20.6, 173.0], [20.7, 173.0], [20.8, 173.0], [20.9, 174.0], [21.0, 174.0], [21.1, 174.0], [21.2, 174.0], [21.3, 175.0], [21.4, 175.0], [21.5, 175.0], [21.6, 175.0], [21.7, 176.0], [21.8, 176.0], [21.9, 176.0], [22.0, 176.0], [22.1, 177.0], [22.2, 177.0], [22.3, 177.0], [22.4, 177.0], [22.5, 177.0], [22.6, 178.0], [22.7, 178.0], [22.8, 178.0], [22.9, 178.0], [23.0, 179.0], [23.1, 179.0], [23.2, 179.0], [23.3, 179.0], [23.4, 180.0], [23.5, 180.0], [23.6, 180.0], [23.7, 180.0], [23.8, 180.0], [23.9, 181.0], [24.0, 181.0], [24.1, 181.0], [24.2, 181.0], [24.3, 182.0], [24.4, 182.0], [24.5, 182.0], [24.6, 182.0], [24.7, 182.0], [24.8, 183.0], [24.9, 183.0], [25.0, 183.0], [25.1, 183.0], [25.2, 184.0], [25.3, 184.0], [25.4, 184.0], [25.5, 184.0], [25.6, 184.0], [25.7, 185.0], [25.8, 185.0], [25.9, 185.0], [26.0, 185.0], [26.1, 186.0], [26.2, 186.0], [26.3, 186.0], [26.4, 186.0], [26.5, 186.0], [26.6, 187.0], [26.7, 187.0], [26.8, 187.0], [26.9, 187.0], [27.0, 187.0], [27.1, 188.0], [27.2, 188.0], [27.3, 188.0], [27.4, 188.0], [27.5, 189.0], [27.6, 189.0], [27.7, 189.0], [27.8, 189.0], [27.9, 189.0], [28.0, 190.0], [28.1, 190.0], [28.2, 190.0], [28.3, 190.0], [28.4, 190.0], [28.5, 191.0], [28.6, 191.0], [28.7, 191.0], [28.8, 191.0], [28.9, 192.0], [29.0, 192.0], [29.1, 192.0], [29.2, 192.0], [29.3, 192.0], [29.4, 193.0], [29.5, 193.0], [29.6, 193.0], [29.7, 193.0], [29.8, 194.0], [29.9, 194.0], [30.0, 194.0], [30.1, 194.0], [30.2, 194.0], [30.3, 195.0], [30.4, 195.0], [30.5, 195.0], [30.6, 195.0], [30.7, 195.0], [30.8, 196.0], [30.9, 196.0], [31.0, 196.0], [31.1, 196.0], [31.2, 197.0], [31.3, 197.0], [31.4, 197.0], [31.5, 197.0], [31.6, 197.0], [31.7, 198.0], [31.8, 198.0], [31.9, 198.0], [32.0, 198.0], [32.1, 198.0], [32.2, 199.0], [32.3, 199.0], [32.4, 199.0], [32.5, 199.0], [32.6, 199.0], [32.7, 200.0], [32.8, 200.0], [32.9, 200.0], [33.0, 200.0], [33.1, 201.0], [33.2, 201.0], [33.3, 201.0], [33.4, 201.0], [33.5, 201.0], [33.6, 202.0], [33.7, 202.0], [33.8, 202.0], [33.9, 202.0], [34.0, 202.0], [34.1, 203.0], [34.2, 203.0], [34.3, 203.0], [34.4, 203.0], [34.5, 203.0], [34.6, 204.0], [34.7, 204.0], [34.8, 204.0], [34.9, 204.0], [35.0, 205.0], [35.1, 205.0], [35.2, 205.0], [35.3, 205.0], [35.4, 205.0], [35.5, 206.0], [35.6, 206.0], [35.7, 206.0], [35.8, 206.0], [35.9, 206.0], [36.0, 207.0], [36.1, 207.0], [36.2, 207.0], [36.3, 207.0], [36.4, 207.0], [36.5, 208.0], [36.6, 208.0], [36.7, 208.0], [36.8, 208.0], [36.9, 209.0], [37.0, 209.0], [37.1, 209.0], [37.2, 209.0], [37.3, 209.0], [37.4, 210.0], [37.5, 210.0], [37.6, 210.0], [37.7, 210.0], [37.8, 210.0], [37.9, 211.0], [38.0, 211.0], [38.1, 211.0], [38.2, 211.0], [38.3, 211.0], [38.4, 212.0], [38.5, 212.0], [38.6, 212.0], [38.7, 212.0], [38.8, 212.0], [38.9, 213.0], [39.0, 213.0], [39.1, 213.0], [39.2, 213.0], [39.3, 214.0], [39.4, 214.0], [39.5, 214.0], [39.6, 214.0], [39.7, 214.0], [39.8, 215.0], [39.9, 215.0], [40.0, 215.0], [40.1, 215.0], [40.2, 215.0], [40.3, 216.0], [40.4, 216.0], [40.5, 216.0], [40.6, 216.0], [40.7, 216.0], [40.8, 217.0], [40.9, 217.0], [41.0, 217.0], [41.1, 217.0], [41.2, 218.0], [41.3, 218.0], [41.4, 218.0], [41.5, 218.0], [41.6, 218.0], [41.7, 219.0], [41.8, 219.0], [41.9, 219.0], [42.0, 219.0], [42.1, 219.0], [42.2, 220.0], [42.3, 220.0], [42.4, 220.0], [42.5, 220.0], [42.6, 220.0], [42.7, 221.0], [42.8, 221.0], [42.9, 221.0], [43.0, 221.0], [43.1, 222.0], [43.2, 222.0], [43.3, 222.0], [43.4, 222.0], [43.5, 222.0], [43.6, 223.0], [43.7, 223.0], [43.8, 223.0], [43.9, 223.0], [44.0, 223.0], [44.1, 224.0], [44.2, 224.0], [44.3, 224.0], [44.4, 224.0], [44.5, 225.0], [44.6, 225.0], [44.7, 225.0], [44.8, 225.0], [44.9, 225.0], [45.0, 226.0], [45.1, 226.0], [45.2, 226.0], [45.3, 226.0], [45.4, 227.0], [45.5, 227.0], [45.6, 227.0], [45.7, 227.0], [45.8, 227.0], [45.9, 228.0], [46.0, 228.0], [46.1, 228.0], [46.2, 228.0], [46.3, 229.0], [46.4, 229.0], [46.5, 229.0], [46.6, 229.0], [46.7, 229.0], [46.8, 230.0], [46.9, 230.0], [47.0, 230.0], [47.1, 230.0], [47.2, 231.0], [47.3, 231.0], [47.4, 231.0], [47.5, 231.0], [47.6, 231.0], [47.7, 232.0], [47.8, 232.0], [47.9, 232.0], [48.0, 232.0], [48.1, 232.0], [48.2, 233.0], [48.3, 233.0], [48.4, 233.0], [48.5, 233.0], [48.6, 234.0], [48.7, 234.0], [48.8, 234.0], [48.9, 234.0], [49.0, 234.0], [49.1, 235.0], [49.2, 235.0], [49.3, 235.0], [49.4, 235.0], [49.5, 236.0], [49.6, 236.0], [49.7, 236.0], [49.8, 236.0], [49.9, 236.0], [50.0, 237.0], [50.1, 237.0], [50.2, 237.0], [50.3, 237.0], [50.4, 238.0], [50.5, 238.0], [50.6, 238.0], [50.7, 238.0], [50.8, 238.0], [50.9, 239.0], [51.0, 239.0], [51.1, 239.0], [51.2, 239.0], [51.3, 240.0], [51.4, 240.0], [51.5, 240.0], [51.6, 240.0], [51.7, 241.0], [51.8, 241.0], [51.9, 241.0], [52.0, 241.0], [52.1, 241.0], [52.2, 242.0], [52.3, 242.0], [52.4, 242.0], [52.5, 242.0], [52.6, 243.0], [52.7, 243.0], [52.8, 243.0], [52.9, 243.0], [53.0, 244.0], [53.1, 244.0], [53.2, 244.0], [53.3, 244.0], [53.4, 245.0], [53.5, 245.0], [53.6, 245.0], [53.7, 245.0], [53.8, 245.0], [53.9, 246.0], [54.0, 246.0], [54.1, 246.0], [54.2, 246.0], [54.3, 247.0], [54.4, 247.0], [54.5, 247.0], [54.6, 247.0], [54.7, 248.0], [54.8, 248.0], [54.9, 248.0], [55.0, 248.0], [55.1, 249.0], [55.2, 249.0], [55.3, 249.0], [55.4, 249.0], [55.5, 250.0], [55.6, 250.0], [55.7, 250.0], [55.8, 250.0], [55.9, 251.0], [56.0, 251.0], [56.1, 251.0], [56.2, 251.0], [56.3, 251.0], [56.4, 252.0], [56.5, 252.0], [56.6, 252.0], [56.7, 252.0], [56.8, 253.0], [56.9, 253.0], [57.0, 253.0], [57.1, 253.0], [57.2, 254.0], [57.3, 254.0], [57.4, 254.0], [57.5, 254.0], [57.6, 255.0], [57.7, 255.0], [57.8, 255.0], [57.9, 255.0], [58.0, 256.0], [58.1, 256.0], [58.2, 256.0], [58.3, 257.0], [58.4, 257.0], [58.5, 257.0], [58.6, 257.0], [58.7, 258.0], [58.8, 258.0], [58.9, 258.0], [59.0, 258.0], [59.1, 259.0], [59.2, 259.0], [59.3, 259.0], [59.4, 259.0], [59.5, 260.0], [59.6, 260.0], [59.7, 260.0], [59.8, 260.0], [59.9, 261.0], [60.0, 261.0], [60.1, 261.0], [60.2, 261.0], [60.3, 262.0], [60.4, 262.0], [60.5, 262.0], [60.6, 263.0], [60.7, 263.0], [60.8, 263.0], [60.9, 263.0], [61.0, 264.0], [61.1, 264.0], [61.2, 264.0], [61.3, 264.0], [61.4, 265.0], [61.5, 265.0], [61.6, 265.0], [61.7, 265.0], [61.8, 266.0], [61.9, 266.0], [62.0, 266.0], [62.1, 266.0], [62.2, 267.0], [62.3, 267.0], [62.4, 267.0], [62.5, 267.0], [62.6, 268.0], [62.7, 268.0], [62.8, 268.0], [62.9, 269.0], [63.0, 269.0], [63.1, 269.0], [63.2, 269.0], [63.3, 270.0], [63.4, 270.0], [63.5, 270.0], [63.6, 270.0], [63.7, 271.0], [63.8, 271.0], [63.9, 271.0], [64.0, 272.0], [64.1, 272.0], [64.2, 272.0], [64.3, 272.0], [64.4, 273.0], [64.5, 273.0], [64.6, 273.0], [64.7, 274.0], [64.8, 274.0], [64.9, 274.0], [65.0, 274.0], [65.1, 275.0], [65.2, 275.0], [65.3, 275.0], [65.4, 276.0], [65.5, 276.0], [65.6, 276.0], [65.7, 277.0], [65.8, 277.0], [65.9, 277.0], [66.0, 277.0], [66.1, 278.0], [66.2, 278.0], [66.3, 278.0], [66.4, 279.0], [66.5, 279.0], [66.6, 279.0], [66.7, 279.0], [66.8, 280.0], [66.9, 280.0], [67.0, 280.0], [67.1, 281.0], [67.2, 281.0], [67.3, 281.0], [67.4, 282.0], [67.5, 282.0], [67.6, 282.0], [67.7, 282.0], [67.8, 283.0], [67.9, 283.0], [68.0, 283.0], [68.1, 284.0], [68.2, 284.0], [68.3, 284.0], [68.4, 285.0], [68.5, 285.0], [68.6, 285.0], [68.7, 285.0], [68.8, 286.0], [68.9, 286.0], [69.0, 286.0], [69.1, 287.0], [69.2, 287.0], [69.3, 287.0], [69.4, 288.0], [69.5, 288.0], [69.6, 288.0], [69.7, 289.0], [69.8, 289.0], [69.9, 289.0], [70.0, 290.0], [70.1, 290.0], [70.2, 290.0], [70.3, 291.0], [70.4, 291.0], [70.5, 291.0], [70.6, 292.0], [70.7, 292.0], [70.8, 292.0], [70.9, 293.0], [71.0, 293.0], [71.1, 293.0], [71.2, 294.0], [71.3, 294.0], [71.4, 294.0], [71.5, 295.0], [71.6, 295.0], [71.7, 295.0], [71.8, 296.0], [71.9, 296.0], [72.0, 296.0], [72.1, 297.0], [72.2, 297.0], [72.3, 297.0], [72.4, 298.0], [72.5, 298.0], [72.6, 299.0], [72.7, 299.0], [72.8, 299.0], [72.9, 300.0], [73.0, 300.0], [73.1, 300.0], [73.2, 301.0], [73.3, 301.0], [73.4, 301.0], [73.5, 302.0], [73.6, 302.0], [73.7, 302.0], [73.8, 303.0], [73.9, 303.0], [74.0, 304.0], [74.1, 304.0], [74.2, 304.0], [74.3, 305.0], [74.4, 305.0], [74.5, 305.0], [74.6, 306.0], [74.7, 306.0], [74.8, 307.0], [74.9, 307.0], [75.0, 307.0], [75.1, 308.0], [75.2, 308.0], [75.3, 308.0], [75.4, 309.0], [75.5, 309.0], [75.6, 310.0], [75.7, 310.0], [75.8, 311.0], [75.9, 311.0], [76.0, 311.0], [76.1, 312.0], [76.2, 312.0], [76.3, 313.0], [76.4, 313.0], [76.5, 313.0], [76.6, 314.0], [76.7, 314.0], [76.8, 315.0], [76.9, 315.0], [77.0, 315.0], [77.1, 316.0], [77.2, 316.0], [77.3, 317.0], [77.4, 317.0], [77.5, 317.0], [77.6, 318.0], [77.7, 318.0], [77.8, 319.0], [77.9, 319.0], [78.0, 320.0], [78.1, 320.0], [78.2, 321.0], [78.3, 321.0], [78.4, 321.0], [78.5, 322.0], [78.6, 322.0], [78.7, 323.0], [78.8, 323.0], [78.9, 324.0], [79.0, 324.0], [79.1, 325.0], [79.2, 325.0], [79.3, 326.0], [79.4, 326.0], [79.5, 327.0], [79.6, 327.0], [79.7, 328.0], [79.8, 328.0], [79.9, 328.0], [80.0, 329.0], [80.1, 329.0], [80.2, 330.0], [80.3, 330.0], [80.4, 331.0], [80.5, 331.0], [80.6, 332.0], [80.7, 332.0], [80.8, 333.0], [80.9, 333.0], [81.0, 334.0], [81.1, 334.0], [81.2, 335.0], [81.3, 335.0], [81.4, 336.0], [81.5, 336.0], [81.6, 337.0], [81.7, 338.0], [81.8, 338.0], [81.9, 339.0], [82.0, 339.0], [82.1, 340.0], [82.2, 340.0], [82.3, 341.0], [82.4, 341.0], [82.5, 342.0], [82.6, 343.0], [82.7, 343.0], [82.8, 344.0], [82.9, 344.0], [83.0, 345.0], [83.1, 345.0], [83.2, 346.0], [83.3, 346.0], [83.4, 347.0], [83.5, 348.0], [83.6, 348.0], [83.7, 349.0], [83.8, 349.0], [83.9, 350.0], [84.0, 351.0], [84.1, 351.0], [84.2, 352.0], [84.3, 352.0], [84.4, 353.0], [84.5, 354.0], [84.6, 354.0], [84.7, 355.0], [84.8, 356.0], [84.9, 356.0], [85.0, 357.0], [85.1, 357.0], [85.2, 358.0], [85.3, 359.0], [85.4, 359.0], [85.5, 360.0], [85.6, 361.0], [85.7, 361.0], [85.8, 362.0], [85.9, 363.0], [86.0, 364.0], [86.1, 364.0], [86.2, 365.0], [86.3, 366.0], [86.4, 366.0], [86.5, 367.0], [86.6, 368.0], [86.7, 369.0], [86.8, 369.0], [86.9, 370.0], [87.0, 371.0], [87.1, 372.0], [87.2, 373.0], [87.3, 373.0], [87.4, 374.0], [87.5, 375.0], [87.6, 376.0], [87.7, 377.0], [87.8, 377.0], [87.9, 378.0], [88.0, 379.0], [88.1, 380.0], [88.2, 381.0], [88.3, 382.0], [88.4, 382.0], [88.5, 383.0], [88.6, 384.0], [88.7, 385.0], [88.8, 386.0], [88.9, 387.0], [89.0, 388.0], [89.1, 389.0], [89.2, 390.0], [89.3, 391.0], [89.4, 391.0], [89.5, 392.0], [89.6, 393.0], [89.7, 394.0], [89.8, 395.0], [89.9, 396.0], [90.0, 397.0], [90.1, 398.0], [90.2, 399.0], [90.3, 400.0], [90.4, 401.0], [90.5, 402.0], [90.6, 403.0], [90.7, 405.0], [90.8, 406.0], [90.9, 407.0], [91.0, 408.0], [91.1, 409.0], [91.2, 410.0], [91.3, 412.0], [91.4, 413.0], [91.5, 414.0], [91.6, 415.0], [91.7, 416.0], [91.8, 418.0], [91.9, 419.0], [92.0, 420.0], [92.1, 421.0], [92.2, 423.0], [92.3, 424.0], [92.4, 425.0], [92.5, 427.0], [92.6, 428.0], [92.7, 429.0], [92.8, 431.0], [92.9, 432.0], [93.0, 434.0], [93.1, 435.0], [93.2, 436.0], [93.3, 438.0], [93.4, 440.0], [93.5, 441.0], [93.6, 443.0], [93.7, 444.0], [93.8, 446.0], [93.9, 448.0], [94.0, 450.0], [94.1, 451.0], [94.2, 453.0], [94.3, 455.0], [94.4, 456.0], [94.5, 458.0], [94.6, 460.0], [94.7, 462.0], [94.8, 464.0], [94.9, 466.0], [95.0, 468.0], [95.1, 470.0], [95.2, 472.0], [95.3, 474.0], [95.4, 476.0], [95.5, 478.0], [95.6, 481.0], [95.7, 483.0], [95.8, 485.0], [95.9, 487.0], [96.0, 490.0], [96.1, 492.0], [96.2, 494.0], [96.3, 497.0], [96.4, 499.0], [96.5, 502.0], [96.6, 504.0], [96.7, 507.0], [96.8, 510.0], [96.9, 513.0], [97.0, 516.0], [97.1, 519.0], [97.2, 522.0], [97.3, 525.0], [97.4, 528.0], [97.5, 532.0], [97.6, 536.0], [97.7, 540.0], [97.8, 544.0], [97.9, 548.0], [98.0, 552.0], [98.1, 557.0], [98.2, 562.0], [98.3, 567.0], [98.4, 572.0], [98.5, 578.0], [98.6, 584.0], [98.7, 590.0], [98.8, 598.0], [98.9, 606.0], [99.0, 614.0], [99.1, 623.0], [99.2, 633.0], [99.3, 644.0], [99.4, 660.0], [99.5, 681.0], [99.6, 712.0], [99.7, 769.0], [99.8, 933.0], [99.9, 7242.0], [100.0, 77900.0]], "isOverall": false, "label": "v1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 302059.0, "series": [{"data": [[0.0, 6632.0], [65900.0, 15.0], [69100.0, 9.0], [67100.0, 10.0], [77900.0, 1.0], [100.0, 237913.0], [46700.0, 1.0], [50900.0, 2.0], [50700.0, 2.0], [200.0, 302059.0], [54300.0, 1.0], [55300.0, 14.0], [55500.0, 1.0], [58900.0, 7.0], [58700.0, 1.0], [58500.0, 8.0], [59500.0, 11.0], [61900.0, 18.0], [61700.0, 2.0], [63300.0, 2.0], [63500.0, 1.0], [64300.0, 7.0], [64500.0, 2.0], [65800.0, 21.0], [69000.0, 12.0], [71800.0, 3.0], [71000.0, 4.0], [300.0, 130080.0], [77800.0, 4.0], [400.0, 46387.0], [500.0, 18090.0], [600.0, 5579.0], [700.0, 1227.0], [800.0, 480.0], [900.0, 127.0], [1000.0, 64.0], [1100.0, 73.0], [1200.0, 144.0], [1300.0, 48.0], [1400.0, 72.0], [1500.0, 5.0], [1600.0, 13.0], [1700.0, 20.0], [1800.0, 10.0], [3000.0, 2.0], [3200.0, 4.0], [4000.0, 6.0], [65700.0, 9.0], [68900.0, 6.0], [71700.0, 24.0], [70900.0, 5.0], [77700.0, 16.0], [5200.0, 5.0], [5300.0, 56.0], [5400.0, 3.0], [6100.0, 16.0], [6200.0, 36.0], [6600.0, 3.0], [6700.0, 15.0], [7000.0, 30.0], [7100.0, 43.0], [7200.0, 12.0], [7300.0, 1.0], [9100.0, 70.0], [9200.0, 6.0], [10100.0, 2.0], [10200.0, 3.0], [10700.0, 32.0], [11000.0, 2.0], [11500.0, 19.0], [11600.0, 16.0], [12200.0, 4.0], [12300.0, 6.0], [13300.0, 1.0], [13600.0, 1.0], [14400.0, 8.0], [14500.0, 29.0], [15600.0, 18.0], [15700.0, 46.0], [17400.0, 1.0], [19400.0, 7.0], [20200.0, 19.0], [20300.0, 2.0], [23500.0, 1.0], [24200.0, 2.0], [46800.0, 1.0], [50800.0, 18.0], [54400.0, 1.0], [55400.0, 49.0], [58800.0, 1.0], [58600.0, 2.0], [59600.0, 13.0], [59400.0, 11.0], [61800.0, 4.0], [61600.0, 1.0], [62000.0, 1.0], [63400.0, 34.0], [64400.0, 8.0], [65600.0, 19.0], [66000.0, 2.0], [68800.0, 20.0], [67200.0, 22.0], [71600.0, 23.0], [70800.0, 1.0]], "isOverall": false, "label": "v1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 77900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1025.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 723371.0, "series": [{"data": [[0.0, 723371.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 25604.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1025.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 142.17880837777994, "minX": 1.75010958E12, "maxY": 150.0, "series": [{"data": [[1.75010994E12, 150.0], [1.75011024E12, 150.0], [1.75010964E12, 150.0], [1.75011066E12, 150.0], [1.75011096E12, 150.0], [1.75011006E12, 150.0], [1.75011036E12, 150.0], [1.75011042E12, 150.0], [1.75011072E12, 150.0], [1.75010982E12, 150.0], [1.75011012E12, 150.0], [1.75011054E12, 150.0], [1.75011084E12, 150.0], [1.7501109E12, 150.0], [1.7501103E12, 150.0], [1.7501106E12, 150.0], [1.7501097E12, 150.0], [1.75011E12, 150.0], [1.75011102E12, 150.0], [1.75010976E12, 150.0], [1.75011078E12, 150.0], [1.75011108E12, 142.17880837777994], [1.75011018E12, 150.0], [1.75011048E12, 150.0], [1.75010958E12, 149.51462134466325], [1.75010988E12, 150.0]], "isOverall": false, "label": "writers", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75011108E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.0, "maxY": 357.07692307692304, "series": [{"data": [[4.0, 39.99999999999999], [5.0, 35.0], [6.0, 36.0], [7.0, 35.22222222222222], [8.0, 38.142857142857146], [9.0, 40.0], [10.0, 41.42857142857142], [12.0, 45.375], [13.0, 45.214285714285715], [14.0, 44.0], [15.0, 47.666666666666664], [16.0, 58.57692307692307], [17.0, 55.5], [18.0, 54.0], [19.0, 51.625], [20.0, 54.25], [21.0, 59.96551724137932], [22.0, 60.099999999999994], [23.0, 55.222222222222214], [24.0, 62.76190476190477], [25.0, 82.23076923076923], [26.0, 83.03571428571429], [27.0, 81.62857142857145], [28.0, 103.6], [29.0, 97.0], [30.0, 90.64285714285715], [31.0, 96.0], [33.0, 86.2], [32.0, 88.5], [37.0, 68.625], [36.0, 84.26666666666665], [39.0, 90.11764705882354], [38.0, 88.96969696969695], [41.0, 94.38461538461537], [40.0, 109.27272727272727], [43.0, 103.5], [42.0, 88.5], [45.0, 85.33333333333333], [44.0, 103.66666666666666], [47.0, 113.36363636363637], [46.0, 106.875], [49.0, 109.5], [48.0, 102.0], [51.0, 125.71428571428572], [50.0, 104.42857142857143], [53.0, 104.71428571428572], [52.0, 123.18518518518522], [55.0, 119.0], [54.0, 82.55555555555554], [57.0, 114.10714285714286], [56.0, 149.05769230769226], [58.0, 118.33333333333333], [61.0, 130.0], [60.0, 133.23076923076925], [63.0, 169.99999999999997], [62.0, 148.27027027027032], [67.0, 90.83333333333331], [66.0, 131.90909090909093], [65.0, 133.99999999999997], [64.0, 163.6], [71.0, 133.4], [70.0, 123.625], [68.0, 113.73076923076923], [75.0, 95.85714285714285], [74.0, 107.32203389830505], [72.0, 124.66666666666667], [78.0, 140.2285714285714], [77.0, 124.9], [76.0, 99.99999999999999], [83.0, 121.56666666666665], [82.0, 147.8], [81.0, 159.61904761904765], [80.0, 164.4], [87.0, 226.7941176470589], [86.0, 212.5], [85.0, 161.95652173913047], [84.0, 90.625], [90.0, 244.76315789473682], [91.0, 241.59375000000006], [89.0, 162.09090909090912], [88.0, 166.83950617283952], [92.0, 183.7364341085271], [93.0, 161.63636363636363], [95.0, 216.29999999999998], [94.0, 185.86363636363637], [96.0, 357.07692307692304], [97.0, 291.69999999999993], [99.0, 274.59999999999997], [98.0, 212.66666666666666], [100.0, 242.46153846153842], [103.0, 158.60000000000008], [102.0, 154.45454545454547], [101.0, 213.98484848484847], [107.0, 185.44444444444446], [106.0, 167.66666666666666], [105.0, 138.8181818181818], [104.0, 107.80000000000001], [111.0, 246.12962962962962], [110.0, 242.64864864864865], [109.0, 134.2051282051282], [108.0, 171.68], [114.0, 197.625], [115.0, 163.28571428571428], [113.0, 199.42944785276072], [112.0, 244.75], [118.0, 216.87878787878782], [119.0, 186.5700934579439], [117.0, 166.421052631579], [116.0, 132.95238095238093], [120.0, 172.1798561151079], [121.0, 159.02325581395345], [122.0, 184.04444444444445], [123.0, 198.19512195121948], [124.0, 189.94594594594594], [125.0, 155.6846846846847], [126.0, 218.0897435897436], [127.0, 185.83050847457628], [128.0, 214.9790209790209], [130.0, 235.40490797546008], [131.0, 234.32692307692307], [132.0, 245.66666666666669], [135.0, 242.67437379576089], [134.0, 241.15833333333325], [133.0, 254.4962962962963], [129.0, 187.29545454545445], [136.0, 254.9506172839506], [138.0, 270.95940959409586], [139.0, 225.8695652173913], [140.0, 181.73684210526318], [141.0, 222.6], [142.0, 165.20377358490566], [143.0, 202.34375], [137.0, 203.41666666666666], [144.0, 240.18149466192182], [145.0, 253.36000000000004], [146.0, 211.34126984126988], [147.0, 238.28927203065123], [148.0, 300.01428571428585], [149.0, 294.15066666666684], [150.0, 303.72009986034226], [1.0, 35.75]], "isOverall": false, "label": "v1", "isController": false}, {"data": [[149.67158399999786, 302.733818666662]], "isOverall": false, "label": "v1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.75010958E12, "maxY": 25827.2, "series": [{"data": [[1.75010994E12, 25078.9], [1.75011024E12, 25365.9], [1.75010964E12, 7964.6], [1.75011066E12, 22655.5], [1.75011096E12, 21803.6], [1.75011006E12, 11217.5], [1.75011036E12, 22114.4], [1.75011042E12, 25383.4], [1.75011072E12, 23445.1], [1.75010982E12, 24788.4], [1.75011012E12, 6042.4], [1.75011054E12, 20037.5], [1.75011084E12, 22717.8], [1.7501109E12, 21937.3], [1.7501103E12, 24577.0], [1.7501106E12, 728.7], [1.7501097E12, 15800.4], [1.75011E12, 25713.8], [1.75011102E12, 24605.7], [1.75010976E12, 25525.5], [1.75011078E12, 24293.5], [1.75011108E12, 21523.6], [1.75011018E12, 24358.6], [1.75011048E12, 23091.6], [1.75010958E12, 8402.1], [1.75010988E12, 25827.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75010994E12, 0.0], [1.75011024E12, 0.0], [1.75010964E12, 0.0], [1.75011066E12, 0.0], [1.75011096E12, 0.0], [1.75011006E12, 0.0], [1.75011036E12, 0.0], [1.75011042E12, 0.0], [1.75011072E12, 0.0], [1.75010982E12, 0.0], [1.75011012E12, 0.0], [1.75011054E12, 0.0], [1.75011084E12, 0.0], [1.7501109E12, 0.0], [1.7501103E12, 0.0], [1.7501106E12, 0.0], [1.7501097E12, 0.0], [1.75011E12, 0.0], [1.75011102E12, 0.0], [1.75010976E12, 0.0], [1.75011078E12, 0.0], [1.75011108E12, 0.0], [1.75011018E12, 0.0], [1.75011048E12, 0.0], [1.75010958E12, 0.0], [1.75010988E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75011108E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 210.2693795043065, "minX": 1.75010958E12, "maxY": 10397.097982708934, "series": [{"data": [[1.75010994E12, 251.03419208976578], [1.75011024E12, 248.11562767337347], [1.75010964E12, 210.2693795043065], [1.75011066E12, 278.0825892167463], [1.75011096E12, 287.6513740850156], [1.75011006E12, 245.61641185647449], [1.75011036E12, 284.60527981767524], [1.75011042E12, 248.2321714191154], [1.75011072E12, 267.99761144119657], [1.75010982E12, 253.9433807748784], [1.75011012E12, 1626.5981232622698], [1.75011054E12, 250.5941659388655], [1.75011084E12, 277.6057804893066], [1.7501109E12, 287.0439707712454], [1.7501103E12, 256.53056109370516], [1.7501106E12, 10397.097982708934], [1.7501097E12, 691.3709020024817], [1.75011E12, 244.8223444220612], [1.75011102E12, 256.9817643879262], [1.75010976E12, 246.6445084327437], [1.75011078E12, 259.28105460308325], [1.75011108E12, 236.8055483283462], [1.75011018E12, 258.8940743720918], [1.75011048E12, 272.57029829028704], [1.75010958E12, 321.03740731483947], [1.75010988E12, 244.11887467476183]], "isOverall": false, "label": "v1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75011108E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 210.2388820530841, "minX": 1.75010958E12, "maxY": 10397.06724303555, "series": [{"data": [[1.75010994E12, 251.00588941301072], [1.75011024E12, 248.08576868946145], [1.75010964E12, 210.2388820530841], [1.75011066E12, 278.05169164220433], [1.75011096E12, 287.6210029536405], [1.75011006E12, 245.58808112324505], [1.75011036E12, 284.5790073436321], [1.75011042E12, 248.20357398929903], [1.75011072E12, 267.9672468874079], [1.75010982E12, 253.91697729583294], [1.75011012E12, 1626.5692771084275], [1.75011054E12, 250.56576419214016], [1.75011084E12, 277.57213286497876], [1.7501109E12, 287.0097961007018], [1.7501103E12, 256.499202506406], [1.7501106E12, 10397.06724303555], [1.7501097E12, 691.3521176678998], [1.75011E12, 244.79335220776446], [1.75011102E12, 256.9507553127945], [1.75010976E12, 246.6168654874554], [1.75011078E12, 259.2494165105884], [1.75011108E12, 236.77426174060082], [1.75011018E12, 258.86565319845863], [1.75011048E12, 272.53928701345956], [1.75010958E12, 320.980088311256], [1.75010988E12, 244.09179856894878]], "isOverall": false, "label": "v1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75011108E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0038424591738712792, "minX": 1.75010958E12, "maxY": 4.700158293759866, "series": [{"data": [[1.75010994E12, 0.009741256594188698], [1.75011024E12, 0.011507575130391703], [1.75010964E12, 0.009843557743012769], [1.75011066E12, 0.009763633554765871], [1.75011096E12, 0.010080904070887369], [1.75011006E12, 0.009734789391575597], [1.75011036E12, 0.009242846290200097], [1.75011042E12, 0.01036898130274112], [1.75011072E12, 0.010061803959036117], [1.75010982E12, 0.008386987461877429], [1.75011012E12, 0.012048192771084376], [1.75011054E12, 0.010689956331877836], [1.75011084E12, 0.012448388488321907], [1.7501109E12, 0.010881010881010825], [1.7501103E12, 0.011079464540017164], [1.7501106E12, 0.0038424591738712792], [1.7501097E12, 0.007221336168704541], [1.75011E12, 0.009745739641748772], [1.75011102E12, 0.010554465022332248], [1.75010976E12, 0.008775538187302905], [1.75011078E12, 0.011035873793401539], [1.75011108E12, 0.010862495121633887], [1.75011018E12, 0.010402896718202208], [1.75011048E12, 0.01076148902631257], [1.75010958E12, 4.700158293759866], [1.75010988E12, 0.009215091066782238]], "isOverall": false, "label": "v1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75011108E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.75010958E12, "maxY": 77900.0, "series": [{"data": [[1.75010994E12, 640.0], [1.75011024E12, 715.0], [1.75010964E12, 500.0], [1.75011066E12, 793.0], [1.75011096E12, 920.0], [1.75011006E12, 698.0], [1.75011036E12, 828.0], [1.75011042E12, 665.0], [1.75011072E12, 793.0], [1.75010982E12, 875.0], [1.75011012E12, 77900.0], [1.75011054E12, 862.0], [1.75011084E12, 828.0], [1.7501109E12, 822.0], [1.7501103E12, 811.0], [1.7501106E12, 71070.0], [1.7501097E12, 69162.0], [1.75011E12, 643.0], [1.75011102E12, 887.0], [1.75010976E12, 792.0], [1.75011078E12, 748.0], [1.75011108E12, 699.0], [1.75011018E12, 951.0], [1.75011048E12, 1005.0], [1.75010958E12, 1520.0], [1.75010988E12, 1890.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75010994E12, 76.0], [1.75011024E12, 68.0], [1.75010964E12, 63.0], [1.75011066E12, 77.0], [1.75011096E12, 77.0], [1.75011006E12, 72.0], [1.75011036E12, 73.0], [1.75011042E12, 72.0], [1.75011072E12, 69.0], [1.75010982E12, 60.0], [1.75011012E12, 69.0], [1.75011054E12, 76.0], [1.75011084E12, 72.0], [1.7501109E12, 62.0], [1.7501103E12, 75.0], [1.7501106E12, 69.0], [1.7501097E12, 61.0], [1.75011E12, 73.0], [1.75011102E12, 65.0], [1.75010976E12, 70.0], [1.75011078E12, 70.0], [1.75011108E12, 31.0], [1.75011018E12, 70.0], [1.75011048E12, 73.0], [1.75010958E12, 49.0], [1.75010988E12, 66.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75010994E12, 378.0], [1.75011024E12, 367.0], [1.75010964E12, 317.0], [1.75011066E12, 512.0], [1.75011096E12, 526.0], [1.75011006E12, 347.0], [1.75011036E12, 504.90000000000146], [1.75011042E12, 362.0], [1.75011072E12, 370.0], [1.75010982E12, 536.0], [1.75011012E12, 545.0], [1.75011054E12, 366.0], [1.75011084E12, 413.0], [1.7501109E12, 445.0], [1.7501103E12, 364.0], [1.7501106E12, 55419.0], [1.7501097E12, 252.0], [1.75011E12, 361.0], [1.75011102E12, 365.0], [1.75010976E12, 377.0], [1.75011078E12, 394.0], [1.75011108E12, 350.0], [1.75011018E12, 378.0], [1.75011048E12, 382.0], [1.75010958E12, 497.0], [1.75010988E12, 322.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75010994E12, 499.0], [1.75011024E12, 502.0], [1.75010964E12, 419.0], [1.75011066E12, 637.0], [1.75011096E12, 703.9800000000032], [1.75011006E12, 468.0], [1.75011036E12, 667.0], [1.75011042E12, 485.0], [1.75011072E12, 494.9900000000016], [1.75010982E12, 710.0], [1.75011012E12, 67225.67], [1.75011054E12, 495.0], [1.75011084E12, 639.0], [1.7501109E12, 629.9800000000032], [1.7501103E12, 518.0], [1.7501106E12, 68226.79999999954], [1.7501097E12, 340.0], [1.75011E12, 469.9900000000016], [1.75011102E12, 475.0], [1.75010976E12, 498.0], [1.75011078E12, 553.9900000000016], [1.75011108E12, 476.0], [1.75011018E12, 494.0], [1.75011048E12, 546.9900000000016], [1.75010958E12, 1275.0], [1.75010988E12, 455.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75010994E12, 242.0], [1.75011024E12, 243.0], [1.75010964E12, 196.0], [1.75011066E12, 243.0], [1.75011096E12, 248.0], [1.75011006E12, 236.0], [1.75011036E12, 233.0], [1.75011042E12, 243.0], [1.75011072E12, 246.0], [1.75010982E12, 224.0], [1.75011012E12, 228.0], [1.75011054E12, 235.0], [1.75011084E12, 267.0], [1.7501109E12, 271.0], [1.7501103E12, 241.0], [1.7501106E12, 235.0], [1.7501097E12, 162.0], [1.75011E12, 237.0], [1.75011102E12, 243.0], [1.75010976E12, 244.0], [1.75011078E12, 251.0], [1.75011108E12, 225.0], [1.75011018E12, 230.0], [1.75011048E12, 252.0], [1.75010958E12, 299.0], [1.75010988E12, 216.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75010994E12, 425.0], [1.75011024E12, 403.0], [1.75010964E12, 363.0], [1.75011066E12, 563.0], [1.75011096E12, 577.0], [1.75011006E12, 384.0], [1.75011036E12, 564.0], [1.75011042E12, 401.0], [1.75011072E12, 412.0], [1.75010982E12, 593.0], [1.75011012E12, 690.0500000000011], [1.75011054E12, 413.0], [1.75011084E12, 466.0], [1.7501109E12, 505.0], [1.7501103E12, 403.0], [1.7501106E12, 59490.6], [1.7501097E12, 283.0], [1.75011E12, 397.0], [1.75011102E12, 402.0], [1.75010976E12, 419.0], [1.75011078E12, 440.0], [1.75011108E12, 387.0], [1.75011018E12, 424.0], [1.75011048E12, 431.0], [1.75010958E12, 642.7999999999993], [1.75010988E12, 364.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75011108E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 2.0, "maxY": 71700.5, "series": [{"data": [[2.0, 50611.5], [8.0, 58529.5], [11.0, 58913.0], [18.0, 64412.5], [22.0, 50833.0], [28.0, 61912.5], [32.0, 33724.0], [35.0, 59582.0], [37.0, 63452.0], [52.0, 71700.5], [60.0, 901.0], [64.0, 33191.5], [76.0, 65856.0], [100.0, 675.5], [151.0, 1235.0], [165.0, 1308.0], [170.0, 270.5], [201.0, 11627.0], [226.0, 460.0], [253.0, 589.0], [254.0, 121.5], [263.0, 483.0], [259.0, 500.0], [273.0, 329.0], [289.0, 345.0], [302.0, 444.0], [303.0, 413.0], [301.0, 589.0], [313.0, 304.0], [319.0, 437.0], [311.0, 263.0], [309.0, 483.0], [327.0, 398.0], [331.0, 443.0], [334.0, 406.5], [333.0, 428.0], [345.0, 430.0], [347.0, 296.0], [350.0, 438.0], [343.0, 490.0], [344.0, 387.5], [346.0, 425.5], [366.0, 305.0], [365.0, 531.0], [357.0, 380.0], [364.0, 422.0], [360.0, 285.5], [354.0, 498.5], [361.0, 286.0], [367.0, 462.0], [368.0, 419.0], [380.0, 237.5], [377.0, 376.0], [381.0, 349.0], [383.0, 372.0], [372.0, 297.0], [379.0, 447.0], [371.0, 274.0], [386.0, 376.0], [395.0, 207.0], [391.0, 386.0], [387.0, 389.0], [398.0, 397.5], [397.0, 238.0], [388.0, 380.5], [384.0, 334.5], [396.0, 344.5], [415.0, 308.0], [401.0, 323.5], [410.0, 330.5], [407.0, 360.0], [402.0, 338.0], [411.0, 351.0], [406.0, 327.0], [405.0, 348.0], [413.0, 255.0], [414.0, 396.0], [409.0, 416.0], [408.0, 322.0], [429.0, 289.0], [416.0, 334.5], [420.0, 357.5], [421.0, 316.0], [418.0, 312.0], [419.0, 304.0], [428.0, 313.0], [427.0, 281.0], [426.0, 235.5], [430.0, 308.0], [431.0, 285.0], [422.0, 341.0], [423.0, 378.0], [425.0, 375.0], [439.0, 312.0], [442.0, 332.0], [441.0, 343.5], [437.0, 316.0], [438.0, 322.0], [446.0, 305.0], [433.0, 343.0], [434.0, 312.0], [445.0, 291.0], [443.0, 235.0], [436.0, 220.5], [461.0, 317.0], [463.0, 315.0], [448.0, 267.0], [455.0, 277.0], [454.0, 328.5], [453.0, 312.0], [456.0, 349.0], [459.0, 326.0], [457.0, 283.0], [458.0, 297.0], [449.0, 351.0], [451.0, 324.0], [476.0, 297.0], [477.0, 299.0], [478.0, 250.0], [471.0, 295.0], [464.0, 432.0], [468.0, 298.0], [469.0, 271.0], [470.0, 308.0], [473.0, 231.0], [475.0, 271.0], [472.0, 256.0], [479.0, 271.5], [465.0, 306.0], [466.0, 303.0], [467.0, 289.0], [474.0, 290.0], [482.0, 301.0], [491.0, 271.0], [490.0, 304.0], [489.0, 267.0], [488.0, 283.0], [494.0, 303.0], [495.0, 222.0], [485.0, 268.0], [484.0, 311.0], [486.0, 305.0], [493.0, 229.0], [492.0, 254.0], [483.0, 285.5], [487.0, 257.0], [480.0, 320.0], [481.0, 273.0], [508.0, 276.0], [510.0, 261.0], [502.0, 263.5], [500.0, 273.0], [511.0, 278.0], [506.0, 279.0], [505.0, 302.0], [507.0, 243.0], [504.0, 270.0], [509.0, 264.0], [496.0, 299.0], [503.0, 289.0], [501.0, 286.0], [497.0, 252.0], [498.0, 234.5], [499.0, 275.0], [519.0, 259.0], [512.0, 268.5], [527.0, 253.0], [525.0, 234.0], [526.0, 293.0], [524.0, 267.0], [541.0, 266.0], [528.0, 257.0], [542.0, 254.0], [543.0, 286.0], [529.0, 267.0], [532.0, 265.0], [531.0, 274.0], [535.0, 282.0], [534.0, 258.0], [533.0, 286.0], [515.0, 275.0], [516.0, 276.0], [514.0, 270.0], [518.0, 273.0], [517.0, 250.0], [513.0, 299.0], [523.0, 215.0], [521.0, 273.0], [522.0, 268.0], [520.0, 285.0], [530.0, 243.0], [536.0, 249.0], [537.0, 252.0], [538.0, 255.0], [540.0, 257.0], [539.0, 256.0], [549.0, 262.0], [573.0, 225.5], [570.0, 248.0], [558.0, 246.0], [556.0, 253.0], [557.0, 245.0], [555.0, 266.0], [554.0, 243.0], [552.0, 275.0], [553.0, 248.0], [561.0, 242.0], [574.0, 247.0], [560.0, 247.0], [575.0, 262.0], [562.0, 263.0], [564.0, 247.0], [563.0, 241.0], [551.0, 247.0], [550.0, 268.0], [569.0, 238.0], [568.0, 249.0], [545.0, 267.0], [548.0, 239.0], [547.0, 255.0], [546.0, 252.0], [559.0, 248.0], [544.0, 265.0], [572.0, 236.0], [571.0, 232.5], [565.0, 218.0], [567.0, 241.5], [566.0, 240.0], [603.0, 234.0], [598.0, 242.0], [599.0, 241.0], [597.0, 228.0], [596.0, 262.0], [595.0, 231.0], [576.0, 257.0], [580.0, 240.0], [601.0, 252.0], [581.0, 243.0], [583.0, 240.0], [600.0, 230.0], [582.0, 255.0], [602.0, 240.0], [594.0, 226.0], [607.0, 221.0], [604.0, 232.0], [605.0, 231.0], [592.0, 242.0], [593.0, 208.0], [586.0, 249.0], [585.0, 243.0], [584.0, 252.0], [577.0, 249.0], [578.0, 269.0], [579.0, 269.0], [587.0, 243.0], [590.0, 259.0], [588.0, 196.0], [589.0, 235.0], [591.0, 260.0], [614.0, 237.0], [638.0, 230.0], [609.0, 235.0], [620.0, 234.0], [622.0, 219.0], [621.0, 224.0], [623.0, 246.0], [608.0, 236.0], [612.0, 228.0], [611.0, 227.0], [610.0, 245.0], [613.0, 242.0], [616.0, 222.0], [617.0, 234.0], [618.0, 219.0], [619.0, 228.0], [629.0, 226.0], [631.0, 242.0], [630.0, 213.5], [636.0, 217.0], [637.0, 216.0], [634.0, 235.0], [635.0, 248.0], [633.0, 204.0], [615.0, 229.0], [632.0, 227.0], [625.0, 237.0], [624.0, 244.0], [639.0, 226.0], [627.0, 237.0], [626.0, 229.0], [628.0, 228.0], [647.0, 231.0], [656.0, 210.0], [655.0, 214.0], [653.0, 221.0], [654.0, 224.0], [659.0, 224.0], [657.0, 224.0], [658.0, 213.0], [660.0, 211.0], [663.0, 218.0], [662.0, 226.0], [661.0, 214.0], [640.0, 226.0], [670.0, 219.0], [669.0, 210.0], [671.0, 220.0], [668.0, 214.0], [667.0, 214.0], [666.0, 217.0], [665.0, 204.0], [664.0, 217.0], [642.0, 208.0], [641.0, 225.0], [643.0, 221.0], [646.0, 234.0], [644.0, 224.0], [645.0, 207.0], [651.0, 234.0], [650.0, 221.0], [649.0, 227.0], [648.0, 227.0], [652.0, 225.0], [697.0, 185.5], [695.0, 217.0], [694.0, 211.0], [693.0, 201.0], [692.0, 215.0], [690.0, 228.0], [688.0, 222.0], [689.0, 220.0], [677.0, 210.0], [676.0, 216.0], [675.0, 232.0], [674.0, 227.0], [672.0, 217.0], [687.0, 208.0], [673.0, 214.0], [684.0, 217.0], [685.0, 216.0], [683.0, 214.0], [680.0, 222.0], [681.0, 215.0], [682.0, 203.5], [686.0, 210.0], [702.0, 184.0], [700.0, 211.0], [698.0, 219.0], [699.0, 208.0], [678.0, 226.0], [679.0, 215.0], [696.0, 208.0], [703.0, 211.0], [706.0, 223.0], [718.0, 187.0], [716.0, 197.0], [717.0, 212.0], [705.0, 207.0], [704.0, 199.0], [719.0, 187.0], [724.0, 213.0], [727.0, 188.0], [726.0, 257.0], [731.0, 189.0], [733.0, 199.0], [732.0, 210.0], [735.0, 200.0], [721.0, 202.0], [722.0, 208.0], [720.0, 209.0], [723.0, 198.0], [711.0, 204.0], [728.0, 201.0], [709.0, 212.0], [707.0, 229.0], [730.0, 190.0], [729.0, 209.0], [712.0, 196.0], [715.0, 190.0], [713.0, 223.0], [763.0, 205.0], [752.0, 200.0], [737.0, 191.0], [755.0, 180.0], [756.0, 200.5], [757.0, 196.0], [764.0, 180.0], [766.0, 183.0], [739.0, 204.0], [738.0, 211.0], [751.0, 200.0], [749.0, 196.0], [748.0, 204.0], [746.0, 206.0], [742.0, 218.0], [743.0, 196.0], [760.0, 203.0], [740.0, 194.0], [771.0, 181.0], [784.0, 187.0], [786.0, 179.0], [775.0, 187.0], [772.0, 213.5], [789.0, 174.0], [791.0, 193.0], [777.0, 185.0], [778.0, 188.0], [768.0, 213.5], [783.0, 190.0], [779.0, 207.0], [793.0, 190.0], [798.0, 196.0], [817.0, 182.0], [821.0, 180.0], [820.0, 182.5], [802.0, 167.0], [830.0, 163.0], [831.0, 169.0], [803.0, 178.0], [800.0, 182.0], [823.0, 166.0], [828.0, 163.5], [814.0, 176.0], [832.0, 164.0], [845.0, 164.0], [872.0, 156.0], [878.0, 171.0], [866.0, 162.0], [881.0, 166.0], [883.0, 168.0], [877.0, 174.0], [922.0, 146.5], [901.0, 157.0], [913.0, 166.0], [921.0, 167.0], [904.0, 173.0], [902.0, 178.0], [949.0, 154.0], [928.0, 154.0], [963.0, 152.0], [1007.0, 144.0], [1004.0, 147.0], [1026.0, 144.0], [1199.0, 115.0], [1217.0, 111.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1217.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 2.0, "maxY": 71700.0, "series": [{"data": [[2.0, 50611.5], [8.0, 58529.5], [11.0, 58913.0], [18.0, 64412.0], [22.0, 50833.0], [28.0, 61912.5], [32.0, 33724.0], [35.0, 59582.0], [37.0, 63452.0], [52.0, 71700.0], [60.0, 901.0], [64.0, 33191.5], [76.0, 65855.5], [100.0, 675.5], [151.0, 1235.0], [165.0, 1308.0], [170.0, 270.5], [201.0, 11627.0], [226.0, 460.0], [253.0, 589.0], [254.0, 121.5], [263.0, 483.0], [259.0, 500.0], [273.0, 329.0], [289.0, 345.0], [302.0, 444.0], [303.0, 413.0], [301.0, 589.0], [313.0, 304.0], [319.0, 437.0], [311.0, 263.0], [309.0, 483.0], [327.0, 398.0], [331.0, 443.0], [334.0, 406.5], [333.0, 428.0], [345.0, 429.0], [347.0, 296.0], [350.0, 438.0], [343.0, 490.0], [344.0, 387.5], [346.0, 425.5], [366.0, 305.0], [365.0, 531.0], [357.0, 380.0], [364.0, 422.0], [360.0, 285.5], [354.0, 498.5], [361.0, 286.0], [367.0, 462.0], [368.0, 419.0], [380.0, 237.5], [377.0, 376.0], [381.0, 349.0], [383.0, 372.0], [372.0, 297.0], [379.0, 447.0], [371.0, 274.0], [386.0, 376.0], [395.0, 207.0], [391.0, 386.0], [387.0, 389.0], [398.0, 397.5], [397.0, 238.0], [388.0, 380.5], [384.0, 334.5], [396.0, 344.5], [415.0, 308.0], [401.0, 323.5], [410.0, 330.5], [407.0, 360.0], [402.0, 338.0], [411.0, 351.0], [406.0, 327.0], [405.0, 347.0], [413.0, 255.0], [414.0, 396.0], [409.0, 416.0], [408.0, 322.0], [429.0, 289.0], [416.0, 334.5], [420.0, 357.5], [421.0, 316.0], [418.0, 312.0], [419.0, 304.0], [428.0, 313.0], [427.0, 281.0], [426.0, 235.5], [430.0, 308.0], [431.0, 285.0], [422.0, 341.0], [423.0, 378.0], [425.0, 375.0], [439.0, 312.0], [442.0, 331.0], [441.0, 343.5], [437.0, 315.5], [438.0, 322.0], [446.0, 305.0], [433.0, 343.0], [434.0, 311.5], [445.0, 291.0], [443.0, 235.0], [436.0, 220.5], [461.0, 317.0], [463.0, 315.0], [448.0, 267.0], [455.0, 277.0], [454.0, 328.5], [453.0, 312.0], [456.0, 349.0], [459.0, 326.0], [457.0, 283.0], [458.0, 297.0], [449.0, 351.0], [451.0, 324.0], [476.0, 297.0], [477.0, 299.0], [478.0, 250.0], [471.0, 295.0], [464.0, 432.0], [468.0, 298.0], [469.0, 271.0], [470.0, 308.0], [473.0, 231.0], [475.0, 271.0], [472.0, 256.0], [479.0, 271.5], [465.0, 306.0], [466.0, 303.0], [467.0, 289.0], [474.0, 290.0], [482.0, 301.0], [491.0, 271.0], [490.0, 304.0], [489.0, 267.0], [488.0, 283.0], [494.0, 303.0], [495.0, 222.0], [485.0, 267.0], [484.0, 311.0], [486.0, 305.0], [493.0, 229.0], [492.0, 254.0], [483.0, 285.5], [487.0, 257.0], [480.0, 320.0], [481.0, 273.0], [508.0, 276.0], [510.0, 261.0], [502.0, 263.5], [500.0, 273.0], [511.0, 278.0], [506.0, 279.0], [505.0, 302.0], [507.0, 243.0], [504.0, 270.0], [509.0, 264.0], [496.0, 299.0], [503.0, 289.0], [501.0, 286.0], [497.0, 252.0], [498.0, 234.5], [499.0, 275.0], [519.0, 259.0], [512.0, 268.5], [527.0, 253.0], [525.0, 234.0], [526.0, 293.0], [524.0, 267.0], [541.0, 266.0], [528.0, 257.0], [542.0, 254.0], [543.0, 286.0], [529.0, 267.0], [532.0, 265.0], [531.0, 274.0], [535.0, 282.0], [534.0, 258.0], [533.0, 286.0], [515.0, 275.0], [516.0, 276.0], [514.0, 270.0], [518.0, 273.0], [517.0, 250.0], [513.0, 299.0], [523.0, 215.0], [521.0, 273.0], [522.0, 268.0], [520.0, 285.0], [530.0, 243.0], [536.0, 249.0], [537.0, 252.0], [538.0, 255.0], [540.0, 257.0], [539.0, 256.0], [549.0, 262.0], [573.0, 225.5], [570.0, 248.0], [558.0, 246.0], [556.0, 253.0], [557.0, 245.0], [555.0, 266.0], [554.0, 243.0], [552.0, 275.0], [553.0, 248.0], [561.0, 242.0], [574.0, 247.0], [560.0, 247.0], [575.0, 262.0], [562.0, 263.0], [564.0, 247.0], [563.0, 241.0], [551.0, 246.5], [550.0, 268.0], [569.0, 238.0], [568.0, 249.0], [545.0, 267.0], [548.0, 239.0], [547.0, 255.0], [546.0, 252.0], [559.0, 248.0], [544.0, 265.0], [572.0, 236.0], [571.0, 232.5], [565.0, 218.0], [567.0, 241.5], [566.0, 240.0], [603.0, 234.0], [598.0, 242.0], [599.0, 241.0], [597.0, 228.0], [596.0, 262.0], [595.0, 231.0], [576.0, 257.0], [580.0, 240.0], [601.0, 252.0], [581.0, 243.0], [583.0, 240.0], [600.0, 230.0], [582.0, 255.0], [602.0, 240.0], [594.0, 226.0], [607.0, 221.0], [604.0, 232.0], [605.0, 231.0], [592.0, 242.0], [593.0, 208.0], [586.0, 249.0], [585.0, 243.0], [584.0, 252.0], [577.0, 249.0], [578.0, 269.0], [579.0, 269.0], [587.0, 243.0], [590.0, 259.0], [588.0, 196.0], [589.0, 235.0], [591.0, 260.0], [614.0, 237.0], [638.0, 230.0], [609.0, 234.0], [620.0, 234.0], [622.0, 219.0], [621.0, 224.0], [623.0, 246.0], [608.0, 236.0], [612.0, 228.0], [611.0, 227.0], [610.0, 245.0], [613.0, 242.0], [616.0, 222.0], [617.0, 234.0], [618.0, 219.0], [619.0, 228.0], [629.0, 225.0], [631.0, 242.0], [630.0, 213.5], [636.0, 217.0], [637.0, 216.0], [634.0, 235.0], [635.0, 248.0], [633.0, 204.0], [615.0, 229.0], [632.0, 227.0], [625.0, 237.0], [624.0, 244.0], [639.0, 226.0], [627.0, 237.0], [626.0, 229.0], [628.0, 228.0], [647.0, 231.0], [656.0, 210.0], [655.0, 214.0], [653.0, 221.0], [654.0, 224.0], [659.0, 224.0], [657.0, 224.0], [658.0, 213.0], [660.0, 211.0], [663.0, 218.0], [662.0, 226.0], [661.0, 214.0], [640.0, 226.0], [670.0, 219.0], [669.0, 210.0], [671.0, 220.0], [668.0, 214.0], [667.0, 214.0], [666.0, 217.0], [665.0, 204.0], [664.0, 217.0], [642.0, 208.0], [641.0, 225.0], [643.0, 221.0], [646.0, 234.0], [644.0, 224.0], [645.0, 207.0], [651.0, 234.0], [650.0, 221.0], [649.0, 227.0], [648.0, 227.0], [652.0, 225.0], [697.0, 185.5], [695.0, 217.0], [694.0, 211.0], [693.0, 200.0], [692.0, 215.0], [690.0, 228.0], [688.0, 222.0], [689.0, 220.0], [677.0, 210.0], [676.0, 216.0], [675.0, 231.0], [674.0, 227.0], [672.0, 217.0], [687.0, 208.0], [673.0, 214.0], [684.0, 217.0], [685.0, 216.0], [683.0, 214.0], [680.0, 222.0], [681.0, 215.0], [682.0, 203.5], [686.0, 210.0], [702.0, 184.0], [700.0, 211.0], [698.0, 219.0], [699.0, 208.0], [678.0, 226.0], [679.0, 215.0], [696.0, 208.0], [703.0, 211.0], [706.0, 223.0], [718.0, 187.0], [716.0, 197.0], [717.0, 212.0], [705.0, 207.0], [704.0, 199.0], [719.0, 187.0], [724.0, 213.0], [727.0, 188.0], [726.0, 257.0], [731.0, 189.0], [733.0, 199.0], [732.0, 210.0], [735.0, 200.0], [721.0, 202.0], [722.0, 208.0], [720.0, 209.0], [723.0, 198.0], [711.0, 204.0], [728.0, 200.5], [709.0, 212.0], [707.0, 229.0], [730.0, 190.0], [729.0, 209.0], [712.0, 196.0], [715.0, 190.0], [713.0, 223.0], [763.0, 205.0], [752.0, 200.0], [737.0, 191.0], [755.0, 180.0], [756.0, 200.5], [757.0, 196.0], [764.0, 180.0], [766.0, 183.0], [739.0, 204.0], [738.0, 211.0], [751.0, 200.0], [749.0, 196.0], [748.0, 204.0], [746.0, 206.0], [742.0, 218.0], [743.0, 196.0], [760.0, 203.0], [740.0, 193.0], [771.0, 181.0], [784.0, 187.0], [786.0, 179.0], [775.0, 187.0], [772.0, 213.5], [789.0, 174.0], [791.0, 193.0], [777.0, 185.0], [778.0, 188.0], [768.0, 213.5], [783.0, 190.0], [779.0, 207.0], [793.0, 190.0], [798.0, 196.0], [817.0, 182.0], [821.0, 180.0], [820.0, 182.0], [802.0, 167.0], [830.0, 163.0], [831.0, 169.0], [803.0, 178.0], [800.0, 182.0], [823.0, 166.0], [828.0, 163.5], [814.0, 176.0], [832.0, 164.0], [845.0, 164.0], [872.0, 156.0], [878.0, 171.0], [866.0, 162.0], [881.0, 166.0], [883.0, 168.0], [877.0, 174.0], [922.0, 146.5], [901.0, 157.0], [913.0, 166.0], [921.0, 167.0], [904.0, 173.0], [902.0, 178.0], [949.0, 154.0], [928.0, 154.0], [963.0, 152.0], [1007.0, 144.0], [1004.0, 147.0], [1026.0, 144.0], [1199.0, 115.0], [1217.0, 111.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1217.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.333333333333332, "minX": 1.75010958E12, "maxY": 614.9166666666666, "series": [{"data": [[1.75010994E12, 597.1166666666667], [1.75011024E12, 603.95], [1.75010964E12, 189.63333333333333], [1.75011066E12, 539.4333333333333], [1.75011096E12, 519.1333333333333], [1.75011006E12, 267.1], [1.75011036E12, 526.5333333333333], [1.75011042E12, 604.3666666666667], [1.75011072E12, 558.2166666666667], [1.75010982E12, 590.2], [1.75011012E12, 143.86666666666667], [1.75011054E12, 477.0833333333333], [1.75011084E12, 540.9], [1.7501109E12, 522.3166666666667], [1.7501103E12, 585.1666666666666], [1.7501106E12, 17.333333333333332], [1.7501097E12, 376.2], [1.75011E12, 612.2333333333333], [1.75011102E12, 585.8333333333334], [1.75010976E12, 607.75], [1.75011078E12, 578.4166666666666], [1.75011108E12, 509.98333333333335], [1.75011018E12, 579.9666666666667], [1.75011048E12, 549.8], [1.75010958E12, 202.55], [1.75010988E12, 614.9166666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75011108E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 17.35, "minX": 1.75010958E12, "maxY": 614.9333333333333, "series": [{"data": [[1.75010994E12, 597.1166666666667], [1.75011024E12, 603.95], [1.75010964E12, 189.63333333333333], [1.75011066E12, 539.4166666666666], [1.75011096E12, 519.1333333333333], [1.75011006E12, 267.0833333333333], [1.75011036E12, 526.5333333333333], [1.75011042E12, 604.3666666666667], [1.75011072E12, 558.2166666666667], [1.75010982E12, 590.2], [1.75011012E12, 143.86666666666667], [1.75011054E12, 477.0833333333333], [1.75011084E12, 540.9], [1.7501109E12, 522.3166666666667], [1.7501103E12, 585.1666666666666], [1.7501106E12, 17.35], [1.7501097E12, 376.2], [1.75011E12, 612.2333333333333], [1.75011102E12, 585.85], [1.75010976E12, 607.75], [1.75011078E12, 578.4166666666666], [1.75011108E12, 512.4666666666667], [1.75011018E12, 579.9666666666667], [1.75011048E12, 549.8], [1.75010958E12, 200.05], [1.75010988E12, 614.9333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75011108E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 17.35, "minX": 1.75010958E12, "maxY": 614.9333333333333, "series": [{"data": [[1.75010994E12, 597.1166666666667], [1.75011024E12, 603.95], [1.75010964E12, 189.63333333333333], [1.75011066E12, 539.4166666666666], [1.75011096E12, 519.1333333333333], [1.75011006E12, 267.0833333333333], [1.75011036E12, 526.5333333333333], [1.75011042E12, 604.3666666666667], [1.75011072E12, 558.2166666666667], [1.75010982E12, 590.2], [1.75011012E12, 143.86666666666667], [1.75011054E12, 477.0833333333333], [1.75011084E12, 540.9], [1.7501109E12, 522.3166666666667], [1.7501103E12, 585.1666666666666], [1.7501106E12, 17.35], [1.7501097E12, 376.2], [1.75011E12, 612.2333333333333], [1.75011102E12, 585.85], [1.75010976E12, 607.75], [1.75011078E12, 578.4166666666666], [1.75011108E12, 512.4666666666667], [1.75011018E12, 579.9666666666667], [1.75011048E12, 549.8], [1.75010958E12, 200.05], [1.75010988E12, 614.9333333333333]], "isOverall": false, "label": "v1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75011108E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 17.35, "minX": 1.75010958E12, "maxY": 614.9333333333333, "series": [{"data": [[1.75010994E12, 597.1166666666667], [1.75011024E12, 603.95], [1.75010964E12, 189.63333333333333], [1.75011066E12, 539.4166666666666], [1.75011096E12, 519.1333333333333], [1.75011006E12, 267.0833333333333], [1.75011036E12, 526.5333333333333], [1.75011042E12, 604.3666666666667], [1.75011072E12, 558.2166666666667], [1.75010982E12, 590.2], [1.75011012E12, 143.86666666666667], [1.75011054E12, 477.0833333333333], [1.75011084E12, 540.9], [1.7501109E12, 522.3166666666667], [1.7501103E12, 585.1666666666666], [1.7501106E12, 17.35], [1.7501097E12, 376.2], [1.75011E12, 612.2333333333333], [1.75011102E12, 585.85], [1.75010976E12, 607.75], [1.75011078E12, 578.4166666666666], [1.75011108E12, 512.4666666666667], [1.75011018E12, 579.9666666666667], [1.75011048E12, 549.8], [1.75010958E12, 200.05], [1.75010988E12, 614.9333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75011108E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

